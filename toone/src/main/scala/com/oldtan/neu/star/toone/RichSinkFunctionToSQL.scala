package com.oldtan.neu.star.toone

import java.sql.{Connection, DriverManager, PreparedStatement}
import java.util.UUID

import org.apache.flink.configuration.Configuration
import org.apache.flink.streaming.api.functions.sink.RichSinkFunction

class RichSinkFunctionToSQL extends RichSinkFunction[List[Map[String, AnyRef]]] {
  var conn: Option[Connection] = None
  var ps: Option[PreparedStatement] = None
  /*val SQL = "insert into emr_episode_summary_diagnosis(ORG_CODE, ORG_NAME, DISCHARGE_DIAG_ID, EPISODE_SUMMARY_ID," +
    "EPI_SUMM_TYPE_CODE,INPATIENT_VISIT_NO, MEDICAL_RECORD_NO,ADMIT_TIMES, DIAG_TYPE_CODE, DIAG_TYPE_NAME," +
    "DIAG_SQUENCE_NO,TCM_WM_MARK,IS_PRIMARY_DIAG,WM_DIAG_CODE_RAW,WM_DIAG_NAME_RAW,WM_DIAG_CODE, " +
    "WM_DIAG_NAME,CM_BING_CODE_RAW, CM_BING_NAME_RAW,CM_BING_CODE,CM_BING_NAME, CM_ZHENG_CODE_RAW, " +
    "CM_ZHENG_NAME_RAW,CM_ZHENG_CODE,CM_ZHENG_NAME, ADMIT_DIAG_STAT_CODE,ADMIT_DIAG_STAT_NAME," +
    "DIAG_CONFIRM_DATE,  CLINI_OUTCOME_CODE,CLINI_OUTCOME_NAME, CONFIDENTIALITY_CODE,LAST_UPDATE_DTIME, RESOURCE_ID, ROWKEY) " +
    "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"*/

  val SQL = """insert into EMR_EPISODE_SUMMARY (ORG_CODE,ORG_NAME,EPISODE_SUMMARY_ID,EPI_SUMM_TYPE_CODE,
               EPI_SUMM_TYPE_NAME,HEALTH_CARD_NO,PATIENT_ID,INPATIENT_VISIT_NO,MEDICAL_RECORD_NO,ADMIT_TIMES,
               EXPENSE_SOURCE_CODE,EXPENSE_SOURCE_NAME,PERSONAL_NAME,SEX_CODE,SEX_NAME,BIRTH_DATE,AGE_YEAR,AGE_MONTH,
               IDENTITY_TYPE_CODE,IDENTITY_TYPE_NAME,IDENTITY_NO,ID_UNK_REASON_CODE,ID_UNK_REASON_NAME,
               OTH_REASON_DESC,NATIONALITY_CODE,NATIONALITY_NAME,NB_BIRTH_WEIGHT1,NB_BIRTH_WEIGHT2,NB_ADMIT_WEIGHT,
               BIRTH_ADDR_PROV,BIRTH_ADDR_CITY,BIRTH_ADDR_COUNTY,NATIVE_PROV,NATIVE_CITY,ETHIC_GROUP_CODE,
               ETHIC_GROUP_NAME,MARITAL_STATUS_CODE,MARITAL_STATUS_NAME,EMPLOY_STATUS_CODE,EMPLOY_STATUS_NAME,
               RESIDENCE_AREA_CODE,RESIDENCE_ADDR,RESIDENCE_PROV,RESIDENCE_CITY,RESIDENCE_COUNTY,RESIDENCE_TOWN,
               RESIDENCE_VILL,RESIDENCE_HOUSE_NO,RESIDENCE_POSTCODE,PERSONAL_PHONE,INHABITANT_TYPE_CODE,
               INHABITANT_TYPE_NAME,REGIST_AREA_CODE,REGIST_ADDR_CITY,REGIST_ADDR_COUNTY,REGIST_ADDR_VILL,REGIST_ADDR_TOWN,
               REGIST_ADDR_HOUSE_NO,REGIST_ADDR_POSTCODE,EMPLOYER_NAME,EMPLOYER_ADDR,EMPLOYER_AREA_CODE,EMPLOYER_ADDR_VILL,
               EMPLOYER_ADDR_PROV,EMPLOYER_ADDR_CITY,EMPLOYER_ADDR_TOWN,EMPLOYER_ADDR_COUNTY,EMPLOYER_HOUSE_NO,
               EMPLOYER_POSTCODE,EMPLOYER_TEL_NO,CONTACT_ADDR,CONTACT_NAME,CONTACT_TEL,CONTACT_REL_CODE,CONTACT_REL_NAME,
               PATIENT_SOURCE_NAME,PATIENT_SOURCE_CODE,MEDICINE_TYPE_CODE,MEDICINE_TYPE_NAME,ADMIT_DTIME,ADMIT_WARD_CODE,
               ADMIT_WARD_NAME,ADMIT_DEPT_CODE,ADMIT_DEPT_NAME,ADMIT_DEPT_CODE_STD,ADMIT_DEPT_NAME_STD,TRANSFER_DEPT_CODE,
               TRANSFER_DEPT_DESC,DISCHARGE_DTIME,DISCHARGE_DEPT_CODE,DISCHARGE_DEPT_NAME,DISCH_DEPT_NAME_STD,
               DISCH_DEPT_CODE_STD,DISCHARGE_WARD_CODE,DISCHARGE_WARD_NAME,LENGTH_OF_STAY,WM_OPT_DIAG_CODE_RAW,
               WM_OPT_DIAG_NAME_RAW,WM_OPT_DIAG_CODE,WM_OPT_DIAG_NAME ,CM_OPT_DIAG_NAME_RAW,CM_OPT_DIAG_CODE_RAW,
               CM_OPT_DIAG_CODE,CM_OPT_DIAG_NAME,DRG_CODE,DRG_NAME,CM_PATHWAY_TYPE_CODE,CM_PATHWAY_TYPE_NAME,
               CM_HOS_PREP_MARK,CM_EQUIP_MARK,CM_TECH_MARK,CM_DIALEC_NUR_MARK,EXT_CAUSE_NAME,EXT_CAUSE_CODE,
               EXT_CAUSE_CODE_RAW,EXT_CAUSE_NAME_RAW,PATHO_DIAG_NAME_RAW,PATHO_DIAG_CODE_RAW,PATHO_DIAG_NAME,
               PATHO_DIAG_CODE,PATHO_EXAM_NO,DIFFEREN_GRADE_CODE,DIFFEREN_GRADE_NAME,DRUG_ALLERGY_MARK,
               ALLERGY_DRUGS,AUTOPSY_MARK,ABO_TYPE_CODE,ABO_TYPE_NAME,RH_TYPE_CODE,RH_TYPE_NAME,DEPT_DIRECTOR_NAME,
               DEPT_DIRECTOR_ID,CHIEF_PHYSICIAN_ID,CHIEF_PHYSICIAN_NAME,ATTENDING_ID,ATTENDING_NAME,RESIDENT_DOC_ID,
               RESIDENT_DOC_NAME,PRIMARY_NURSE_ID,PRIMARY_NURSE_NAME,REFRESHER_ID,REFRESHER_NAME,INTERN_ID,
               INTERN_NAME,CODE_ENTERER_ID,CODE_ENTERER_NAME,MR_QUALITY_CODE,MR_QUALITY_NAME,QC_DOCTOR_ID,
               QC_DOCTOR_NAME,QC_NURSE_ID,QC_NURSE_NAME,QC_DATE,IS_SURG_PROCEDURE,SURG_PROCEDURE_NUM,
               DISCHARGE_WAY_CODE,DISCHARGE_WAY_NAME,DESTINATION_ORG_NAME,READMIT_PLAN_31DAY,READMIT_PURPOSE,
               PRE_ADM_COMA_DAYS,PRE_ADM_COMA_HOURS,PRE_ADM_COME_MINS,POST_ADM_COMA_DAYS,POST_ADM_COMA_HOURS,
               POST_ADM_COME_MINS,TOTAL_EXPENSE,OUT_OF_POCKET,GEN_MED_SERV_FEE,CM_DIALEC_ANALY_FEE,
               CM_DIALEC_CONSUL_FEE,GEN_TRATMENT_FEE,NURSING_FEE,OTH_GEN_SERV_FEE,PATHO_DIAG_FEE,
               LAB_DIAG_FEE,CLIN_DIAG_FEE,IMAG_DIAG_FEE,NON_SURG_TREAT_FEE,PHYSIOTHERAPY_FEE,SURG_TREAT_FEE,
               ANESTHESIA_FEE,SURGERY_FEE,REHAB_FEE,CM_GIAG_FEE,TCM_TREAT_FEE,CM_EXT_THERA_FEE,
               CM_OSTO_TRAUM_FEE,CM_ANCUP_MOXIB_FEE,CM_TUINA_FEE,CM_PROCTO_FEE,CM_SPECIAL_TREAT_FEE,CM_OTH_TCM_FEE,
               CM_FORMULA_PROC_FEE,CM_DIALECT_DIET_FEE,W_MEDICINE_FEE,ANTIBIOTICS_FEE,PATENT_TCM_FEE,
               CM_HOS_PREP_FEE,HERB_FEE,BLOOD_FEE,ALBUMIN_FEE,GLOBULIN_FEE,COAGULAT_FACTOR_FEE,
               CYTOKINE_FEE,EXAM_MATERIAL_FEE,TREAT_MATERIAL_FEE,SURGERY_MATERIAL_FEE,OTHER_FEE,CREATE_DTIME,
               ARCHIVE_DTIME,RECORD_STATUS_CODE,CONFIDENTIALITY_CODE,LAST_UPDATE_DTIME,RESOURCE_ID,ROWKEY)
               values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
               ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
               ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
               ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
               ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""

  @throws("Due to the connect error then exit!")
  def getConnection: Option[Connection] = {
    //val DB_URL = "jdbc:oracle:thin:@10.101.37.65:1521:orcl19c"
    //val DB_URL = "jdbc:oracle:thin:@10.34.14.1:1521:ythorcl"
    val DB_URL = """jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.34.14.1)(PORT=1521))(LOAD_BALANCE=yes))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=ythorcl)))"""
    val USER = "mdm"
    val PASS = "mdm"
    Class.forName("oracle.jdbc.driver.OracleDriver")
    Option(DriverManager.getConnection(DB_URL, USER, PASS))
  }

  override def open(parameters: Configuration) = {
    super.open(parameters)
    conn = this.getConnection
    ps = Option(conn.get.prepareStatement(SQL))
  }

  override def close() = {
    conn.foreach(_ close)
    ps.foreach(_ close)
  }

  override def invoke(d: List[Map[String, AnyRef]]) {
    ps.foreach(p => {
      d.foreach(m => {
        (1 to 215).foreach(i => {
          p.setObject(i, m.get(String.valueOf(i)).orNull)})
        p.setString(216, UUID.randomUUID().toString)
        p addBatch
      })
      p executeBatch
    })
  }

}
